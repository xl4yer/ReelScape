@page "/Watch/{MovieId}"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager Nav

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.devbridge-autocomplete/1.4.11/jquery.autocomplete.min.js"></script>
    <style>
        .iframe-container {
            position: relative;
            padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
            height: 0;
            overflow: hidden;
            border-radius: 10px;
        }

            .iframe-container iframe {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: none;
            }

        .movie-details {
            text-align: center;
        }

        .movie-poster {
            width: 100%;
            max-width: 500px;
            max-height: 500px;
            border-radius: 10px;
        }

        .movie-description {
            color: white; /* Ensures description text is white */
        }

        body {
            background-color: #181818;
            /*    background-image: url('bg.jpg'); */
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            position: relative;
        }

            body::before {
                content: "";
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: -1;
            }

        .search-bar {
            width: 100%;
            height: 40px;
            font-size: 16px;
            background-color: #252525;
            color: white;
            border: 2px solid #007bff;
            padding: 10px;
            border-radius: 20px;
            outline: none;
            transition: 0.3s ease-in-out;
            padding-left: 45px;
        }

            .search-bar:focus {
                background-color: #1e1e1e;
                border-color: #0056b3;
                box-shadow: 0px 0px 10px #007bff;
            }

        .search-icon {
            position: absolute;
            top: 50%;
            left: 15px;
            transform: translateY(-50%);
            color: #007bff;
            font-size: 20px;
        }

        .search-wrapper {
            position: relative;
            width: 100%;
            max-width: 400px;
        }

        .autocomplete-suggestion {
            display: flex;
            align-items: center;
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #444;
            background: #181818;
            font-size: 14px;
            color: white;
            border-radius: 5px;
        }

            .autocomplete-suggestion img {
                width: 50px;
                height: 75px;
                object-fit: cover;
                margin-right: 10px;
                border-radius: 5px;
            }

        .autocomplete-info {
            display: flex;
            flex-direction: column;
        }

            .autocomplete-info span {
                font-weight: bold;
                font-size: 16px;
            }

        .watch-btn {
            background-color: #007bff;
            color: white;
            padding: 6px 12px;
            font-size: 13px;
            border-radius: 4px;
            text-decoration: none;
            margin-top: 5px;
            width: 100px;
        }

            .watch-btn:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background-color:transparent">
        <div class="container">
            <a class="navbar-brand" href="/" onclick="forceReload(event)">ReelScape</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-between" id="navbarNav">
                <ul class="navbar-nav ">
                    <li class="nav-item">
                        <a class="nav-link active" href="/" onclick="forceReload(event)">Home</a>
                        <script>
                            function forceReload(event) {
                                event.preventDefault(); // Prevent Blazor from handling navigation
                                window.location.assign("/"); // Navigate and reload in the same tab
                            }
                        </script>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="facebook.com" target="_blank">Facebook</a>
                    </li>
                </ul>
                <!-- Search bar inside Navbar -->
                <div class="search-wrapper d-flex">
                    <input type="text" id="movie-search" class="search-bar" placeholder="Search movies...">
                    <span class="search-icon"></span>
                </div>
            </div>
        </div>
    </nav>

    <script>
        $(document).ready(function () {
            $('#movie-search').autocomplete({
                serviceUrl: 'https://api.themoviedb.org/3/search/movie',
                dataType: 'json',
                params: {
                    api_key: '5f4f3893af8e7aba1ef26b10a0178388'
                },
                paramName: 'query',
                transformResult: function(response) {
                    return {
                        suggestions: response.results.map(movie => ({
                            value: movie.title,
                            data: movie
                        }))
                    };
                },
                onSelect: function (suggestion) {
                    window.location.href = `/Watch/${suggestion.data.id}`;
                },
                formatResult: function (suggestion, currentValue) {
                    return `
                          <div class="autocomplete-suggestion">
            <img src="https://image.tmdb.org/t/p/w92${suggestion.data.poster_path || ''}" alt="${suggestion.data.title}">
            <div class="autocomplete-info">
                <span>${suggestion.data.title}</span>
                <p class="description">${suggestion.data.overview || 'No description available.'}</p>
                <a href="/Watch/${suggestion.data.id}" class="watch-btn">Watch</a>
            </div>
        </div>
                    `;
                }
            });
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <br />
    <br />
</body>
</html>


@if (movie != null)
{
    <title>Watch @movie.original_title</title>
}

<div class="iframe-container">
    <iframe src="@MovieUrl" allowfullscreen></iframe>
</div>
<br />
<center>
    <h6 style="color:white; font-style:italic">&#9888; Please switch to other servers if default server doesn't work.</h6>
</center>
<div class="d-flex flex-wrap justify-content-center gap-3 mt-3">
    <button @onclick="Server1" type="button" class="btn server-btn-dark">Server 1</button>
    <button @onclick="Server2" type="button" class="btn server-btn-dark">Server 2</button>
    <button @onclick="Server3" type="button" class="btn server-btn-dark">Server 3</button>
    <button @onclick="Server4" type="button" class="btn server-btn-dark">Server 4</button>
    <button @onclick="Server5" type="button" class="btn server-btn-dark">Server 5</button>
    <button @onclick="Server6" type="button" class="btn server-btn-dark">Server 6</button>
    <button @onclick="Server7" type="button" class="btn server-btn-dark">Server 7</button>
    <button @onclick="Server8" type="button" class="btn server-btn-dark">Server 8</button>
    <button @onclick="Server9" type="button" class="btn server-btn-dark">Server 9</button>
</div>

<style>
    .server-btn-dark {
        background: #222;
        border: 2px solid #444;
        color: #fff;
        font-weight: bold;
        padding: 12px 24px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
        text-transform: uppercase;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
    }

        .server-btn-dark::before {
            content: "";
            position: absolute;
            top: -2px;
            left: -2px;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #ff004c, #00d4ff, #ff004c);
            z-index: -1;
            filter: blur(10px);
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }

        .server-btn-dark:hover::before {
            opacity: 1;
        }

        .server-btn-dark:hover {
            color: #00d4ff;
            border-color: #00d4ff;
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.6);
            transform: translateY(-3px);
        }

        .server-btn-dark:active {
            transform: translateY(1px);
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.4);
        }
</style>
<br />
<br />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10 col-sm-12 d-flex flex-column flex-md-row align-items-start gap-3">
            @if (movie == null)
            {
                <div class="d-flex justify-content-center my-4 w-100">
                    <div class="loader"></div>
                </div>
            }
            else
            {

                <img src="@($"https://image.tmdb.org/t/p/w500/{movie.poster_path}")"
                     class="movie-poster img-fluid"
                     alt="@movie.original_title"
                     style="max-width: 200px; height: auto;">

                <div class="movie-details" style="text-align: start;">
                    <h5 class="mt-3">@movie.original_title</h5>
                    <p class="movie-description">@movie.overview</p>
                </div>
            }
        </div>
    </div>
</div>



@code {
    private string movieEndpoint = "https://vidlink.pro/movie/";
    [Parameter] public string MovieId { get; set; } = string.Empty;
    private string MovieUrl => $"{movieEndpoint}{MovieId}";

    private const string API_KEY = "5f4f3893af8e7aba1ef26b10a0178388";
    private Tmdb? movie;
    private List<Tmdb> movies = new();

    private void GoHome()
    {
        Nav.NavigateTo("/", true); // Forces a full reload
    }

    [Inject] private HttpClient Http { get; set; } = default!;

    private void Server1()
    {
        movieEndpoint = "https://vidlink.pro/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server2()
    {
        movieEndpoint = "https://vidsrc.dev/embed/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server3()
    {
        movieEndpoint = "https://111movies.com/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server4()
    {
        movieEndpoint = "https://vidjoy.pro/embed/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server5()
    {
        movieEndpoint = "https://vidsrc.io/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server6()
    {
        movieEndpoint = "https://vidsrc.cc/v2/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server7()
    {
        movieEndpoint = "https://vidsrc.xyz/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server8()
    {
        movieEndpoint = "https://www.2embed.cc/embed/";
        StateHasChanged(); // Force UI update
    }
    private void Server9()
    {
        movieEndpoint = "https://moviesapi.club/movie/";
        StateHasChanged(); // Force UI update
    }


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            string apiUrl = $"https://api.themoviedb.org/3/movie/{MovieId}?api_key={API_KEY}";
            movie = await Http.GetFromJsonAsync<Tmdb>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie data: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData("movie", $"https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}");
    }

    private async Task LoadData(string type, string url)
    {
        try
        {
            using (var client = new HttpClient())
            {
                var response = await client.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    var tmdbResponse = JsonConvert.DeserializeObject<TmdbResponse>(contentResponse);

                    if (type == "movie")
                    {
                        movies = tmdbResponse.results ?? new List<Tmdb>();
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}