@page "/Watch/{MovieId}"
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject NavigationManager Nav

<script type="text/javascript" data-cfasync="false">
    /*<![CDATA[/* */
    (function(){var f=window,u="fc34906c3199498d88d7029a7e5cee96",h=[["siteId",258-503*549*365+105976195],["minBid",0],["popundersPerIP","0"],["delayBetween",0],["default",false],["defaultPerDay",0],["topmostLayer","auto"]],g=["d3d3LnhhZHNtYXJ0LmNvbS9DRi9NT2JBaEsvbGVwaWNlZGl0b3IubWluLmpz","ZDExZW5xMnJ5bXkweWwuY2xvdWRmcm9udC5uZXQvbWFkbWlubHRlLm1pbi5qcw==","d3d3LmVxZ21ubXFsei5jb20vaWRRU1hwL1VxVi9nZXBpY2VkaXRvci5taW4uanM=","d3d3LmhicWFpaG93aW15aXVoLmNvbS9wYWRtaW5sdGUubWluLmpz"],w=-1,z,o,k=function(){clearTimeout(o);w++;if(g[w]&&!(1767662479000<(new Date).getTime()&&1<w)){z=f.document.createElement("script");z.type="text/javascript";z.async=!0;var j=f.document.getElementsByTagName("script")[0];z.src="https://"+atob(g[w]);z.crossOrigin="anonymous";z.onerror=k;z.onload=function(){clearTimeout(o);f[u.slice(0,16)+u.slice(0,16)]||k()};o=setTimeout(k,5E3);j.parentNode.insertBefore(z,j)}};if(!f[u]){try{Object.freeze(f[u]=h)}catch(e){}k()}})();
    /*]]>/* */
</script>


@if (movie != null)
{
    <title>Watch @movie.original_title</title>
}

<div class="iframe-container">
    <iframe src="@MovieUrl" allowfullscreen></iframe>
</div>
<br />
<center>
    <h6 style="color:white; font-style:italic">&#9888; Please switch to other servers if default server doesn't work.</h6>
</center>
<div class="d-flex flex-wrap justify-content-center gap-3 mt-3">
    <button @onclick="Server1" type="button" class="btn server-btn-dark">Server 1</button>
    <button @onclick="Server2" type="button" class="btn server-btn-dark">Server 2</button>
    <button @onclick="Server3" type="button" class="btn server-btn-dark">Server 3</button>
    <button @onclick="Server4" type="button" class="btn server-btn-dark">Server 4</button>
    <button @onclick="Server5" type="button" class="btn server-btn-dark">Server 5</button>
    <button @onclick="Server6" type="button" class="btn server-btn-dark">Server 6</button>
    <button @onclick="Server7" type="button" class="btn server-btn-dark">Server 7</button>
    <button @onclick="Server8" type="button" class="btn server-btn-dark">Server 8</button>
    <button @onclick="Server9" type="button" class="btn server-btn-dark">Server 9</button>
</div>

<style>
    .iframe-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
        height: 0;
        overflow: hidden;
        border-radius: 10px;
    }

        .iframe-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
    .server-btn-dark {
        background: #222;
        border: 2px solid #444;
        color: #fff;
        font-weight: bold;
        padding: 12px 24px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4);
        text-transform: uppercase;
        letter-spacing: 1px;
        position: relative;
        overflow: hidden;
    }

        .server-btn-dark::before {
            content: "";
            position: absolute;
            top: -2px;
            left: -2px;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #ff004c, #00d4ff, #ff004c);
            z-index: -1;
            filter: blur(10px);
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }

        .server-btn-dark:hover::before {
            opacity: 1;
        }

        .server-btn-dark:hover {
            color: #00d4ff;
            border-color: #00d4ff;
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.6);
            transform: translateY(-3px);
        }

        .server-btn-dark:active {
            transform: translateY(1px);
            box-shadow: 0 0 10px rgba(0, 212, 255, 0.4);
        }
</style>
<br />
<br />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10 col-sm-12 d-flex flex-column flex-md-row align-items-center text-center text-md-start gap-3">
            @if (movie == null)
            {
                <div class="d-flex justify-content-center my-4 w-100">
                    <div class="loader"></div>
                </div>
            }
            else
            {
                <img src="@($"https://image.tmdb.org/t/p/w500/{movie.poster_path}")"
                     class="movie-poster img-fluid"
                     alt="@movie.original_title"
                     style="max-width: 200px; height: auto;">

                <div class="movie-details" style="color:white">
                    <h5 class="mt-3">@movie.original_title</h5>
                    <p class="movie-description">@movie.overview</p>
                </div>
            }
        </div>
    </div>
</div>




@code {
    private string movieEndpoint = "https://vidlink.pro/movie/";
    [Parameter] public string MovieId { get; set; } = string.Empty;
    private string MovieUrl => $"{movieEndpoint}{MovieId}";

    private const string API_KEY = "5f4f3893af8e7aba1ef26b10a0178388";
    private Tmdb? movie;
    private List<Tmdb> movies = new();

    private void GoHome()
    {
        Nav.NavigateTo("/", true); // Forces a full reload
    }

    [Inject] private HttpClient Http { get; set; } = default!;

    private void Server1()
    {
        movieEndpoint = "https://vidlink.pro/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server2()
    {
        movieEndpoint = "https://vidsrc.dev/embed/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server3()
    {
        movieEndpoint = "https://111movies.com/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server4()
    {
        movieEndpoint = "https://vidjoy.pro/embed/movie/";
        StateHasChanged(); // Force UI update
    }

    private void Server5()
    {
        movieEndpoint = "https://vidsrc.io/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server6()
    {
        movieEndpoint = "https://vidsrc.cc/v2/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server7()
    {
        movieEndpoint = "https://vidsrc.xyz/embed/movie/";
        StateHasChanged(); // Force UI update
    }
    private void Server8()
    {
        movieEndpoint = "https://www.2embed.cc/embed/";
        StateHasChanged(); // Force UI update
    }
    private void Server9()
    {
        movieEndpoint = "https://moviesapi.club/movie/";
        StateHasChanged(); // Force UI update
    }


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            string apiUrl = $"https://api.themoviedb.org/3/movie/{MovieId}?api_key={API_KEY}";
            movie = await Http.GetFromJsonAsync<Tmdb>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movie data: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData("movie", $"https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}");
    }

    private async Task LoadData(string type, string url)
    {
        try
        {
            using (var client = new HttpClient())
            {
                var response = await client.GetAsync(url);
                if (response.IsSuccessStatusCode)
                {
                    var contentResponse = await response.Content.ReadAsStringAsync();
                    var tmdbResponse = JsonConvert.DeserializeObject<TmdbResponse>(contentResponse);

                    if (type == "movie")
                    {
                        movies = tmdbResponse.results ?? new List<Tmdb>();
                    }

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}