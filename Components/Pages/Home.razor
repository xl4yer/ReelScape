@page "/"
@rendermode InteractiveServer

<PageTitle>ReelScape - Watch & Stream Movies Online</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.devbridge-autocomplete/1.4.11/jquery.autocomplete.min.js"></script>
    <style>
        .custom-d-flex {
            padding-top: 250px;
        }

        .container {
            max-width: 1200px;
            margin: auto;
        }

        .row {
            --bs-gutter-x: 1.5rem;
            --bs-gutter-y: 1rem;
        }

        .col {
            display: flex;
            justify-content: center;
        }

        .card {
            width: 100%;
            max-width: 95px;
            font-size: 12px;
        }

        .card img {
            height: 150px;
            width: 95px;
        }

        /* Mobile */
        @@media (max-width: 575px) {
            .col {
                width: 100%;
            }
        }

        /* Tablets */
        @@media (min-width: 576px) and (max-width: 991px) {
            .col {
                width: 50%;
            }
        }

        /* Desktops */
        @@media (min-width: 992px) {
            .col {
                width: 20%;
            }
        }

        body {
            background-color: #181818;
            /*   background-image: url('bg.jpg'); */
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            position: relative;
        }

            body::before {
                content: "";
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: -1;
            }

        .search-bar {
            width: 100%;
            height: 40px;
            font-size: 16px;
            background-color: #252525;
            color: white;
            border: 2px solid #007bff;
            padding: 10px;
            border-radius: 20px;
            outline: none;
            transition: 0.3s ease-in-out;
            padding-left: 45px;
        }

            .search-bar:focus {
                background-color: #1e1e1e;
                border-color: #0056b3;
                box-shadow: 0px 0px 10px #007bff;
            }

        .search-icon {
            position: absolute;
            top: 50%;
            left: 15px;
            transform: translateY(-50%);
            color: #007bff;
            font-size: 20px;
        }

        .search-wrapper {
            position: relative;
            width: 100%;
            max-width: 400px;
        }

        .autocomplete-suggestion {
            display: flex;
            align-items: center;
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #444;
            background: #181818;
            font-size: 14px;
            color: white;
            border-radius: 5px;
        }

            .autocomplete-suggestion img {
                width: 50px;
                height: 75px;
                object-fit: cover;
                margin-right: 10px;
                border-radius: 5px;
            }

        .autocomplete-info {
            display: flex;
            flex-direction: column;
        }

            .autocomplete-info span {
                font-weight: bold;
                font-size: 16px;
            }

        .watch-btn {
            background-color: #007bff;
            color: white;
            padding: 6px 12px;
            font-size: 13px;
            border-radius: 4px;
            text-decoration: none;
            margin-top: 5px;
            width: 100px;
        }

            .watch-btn:hover {
                background-color: #0056b3;
            }
    </style>
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-transparent">
        <div class="container">
            <a class="navbar-brand" href="/">ReelScape</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse justify-content-between" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="facebook.com" target="_blank">Facebook</a>
                    </li>
                </ul>
                <!-- Search bar inside Navbar -->
                <div class="search-wrapper d-flex">
                    <input type="text" id="movie-search" class="search-bar" placeholder="Search movies...">
                    <span class="search-icon"></span>
                </div>
            </div>
        </div>
    </nav>

    <script>
        $(document).ready(function () {
            $('#movie-search').autocomplete({
                serviceUrl: 'https://api.themoviedb.org/3/search/movie',
                dataType: 'json',
                params: {
                    api_key: '5f4f3893af8e7aba1ef26b10a0178388'
                },
                paramName: 'query',
                transformResult: function(response) {
                    return {
                        suggestions: response.results.map(movie => ({
                            value: movie.title,
                            data: movie
                        }))
                    };
                },
                onSelect: function (suggestion) {
                    window.location.href = `/Watch/${suggestion.data.id}`;
                },
                formatResult: function (suggestion, currentValue) {
                    return `
                          <div class="autocomplete-suggestion">
            <img src="https://image.tmdb.org/t/p/w92${suggestion.data.poster_path || ''}" alt="${suggestion.data.title}">
            <div class="autocomplete-info">
                <span>${suggestion.data.title}</span>
                <p class="description">${suggestion.data.overview || 'No description available.'}</p>
                <a href="/Watch/${suggestion.data.id}" class="watch-btn">Watch Now</a>
            </div>
        </div>
                    `;
                }
            });
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <br />
    <br />
    @foreach (var (page, list) in pages)
    {
        <div class="container">
            @if (list == null || !list.Any())
            {
                <div class="custom-d-flex justify-content-center my-4">
                    <div class="loader"></div>
                </div>
            }
            else
            {
                <div class="row justify-content-center">
                    @foreach (var movie in list)
                    {
                        <div class="col">
                            <a href="/Watch/@movie.id" style="text-decoration:none">
                                <div class="card">
                                    <img src="https://image.tmdb.org/t/p/w500/@movie.poster_path" class="card-img-top" alt="@movie.original_title">
                                    <div class="card-body text-center">
                                        <p class="card-title">@movie.title</p>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            }
        </div>
    <br />
    }
</body>
</html>


@code {
    private readonly Dictionary<int, List<Tmdb>> pages = new();
    private static readonly HttpClient client = new();
    private const string API_KEY = "5f4f3893af8e7aba1ef26b10a0178388";

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(Enumerable.Range(1, 3).Select(LoadData));
    }

    private async Task LoadData(int page)
    {
        try
        {
            var url = $"https://api.themoviedb.org/3/discover/movie?api_key={API_KEY}&page={page}";
            var response = await client.GetStringAsync(url);
            var tmdbResponse = JsonConvert.DeserializeObject<TmdbResponse>(response);
            pages[page] = tmdbResponse?.results ?? new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}